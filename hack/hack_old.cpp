#include <iostream>
#include <string>

#include "remote.h"

#define endit(s) printf("%s\n",s); sleep(3); exit(-1)

#define PROCESSNAME "mvmmoclient"
 
 
int main() 
{
    remote::Handle handle;

    //*/// root

    if (getuid() != 0)
    {
        endit("Cannot start as NON ROOT user.");
    }

    //*/// pid

    printf("Finding process ID: \n");

    while (true)
    {
        if (remote::FindProcessByName(PROCESSNAME, &handle)) break;
        usleep(1000);
    }

    printf("Discovered with PID: %d \n",handle.GetPid());

    unsigned long memaddr(0);     //HP-ammo 0x28C

    //*/// find by pattern

    while (memaddr==0) 
    {
        if (!handle.IsRunning())
        {
            endit("regions");
        }

        handle.ParseMaps();

        for (auto region : handle.regions)
        {
            memaddr = (long)region.find
            (
                handle,
                "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xce\x82\x00\x00\x00\x00\x00\xf8\xce\x82\x00\x00\x00\x00\x00\xf8\xce\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x33\x30\x00\xb0\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x18\xc9\x82\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x83\x01\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x8c\x5c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                "?xxx?xxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxx????xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxx????xxxxxx??xxxx???x?xxx????xxxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx???????xx???????xxxx????xxxx?????xxxxxxxxxxxxxxxxx??xxxxxxxxxxxxxxxxx???xxxxxxxx????????xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxx????xxxxxxxxx???xxxx?xxx????????xxxxxxxxxxxxxxxxxxxxxxxx?xxx?xxx????xxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxx????xxx??xxxxxxxxxxxxxx?xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx???x????????xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxx?xxxxxxx?xxxxxxx?xxx"
            );

            printf("%lx - %lx\n",region.start, memaddr);
            if (memaddr>0) {memaddr; break;}
        }

        usleep(500); 
    }

    printf("Found memaddr address: %lx\n",memaddr);

    //*/// read memory


    int healt(0);
    if( handle.Read( (void*)(memaddr+0), &healt, sizeof(healt) ) ) printf("healt: %d \n",healt);
    
    int maxhealt(0);
    if( handle.Read( (void*)(memaddr+0x4), &maxhealt, sizeof(maxhealt) ) ) printf("maxhealt: %d \n",maxhealt);

    int ammo(0);
    if( handle.Read( (void*)(memaddr+0x28c), &ammo, sizeof(ammo) ) ) printf("ammo: %d \n",ammo);

    int maxammo(0);
    if( handle.Read( (void*)(memaddr+0x28c-0x08), &maxammo, sizeof(maxammo) ) ) printf("maxammo: %d \n",maxammo);


    //*/// write

    healt=maxhealt;
    handle.Write( (void*)(memaddr+0), &healt, sizeof(healt) );

    ammo=maxammo;
    handle.Write( (void*)(memaddr+0), &ammo, sizeof(ammo) );

    //*/// region
    
    remote::MapModuleMemoryRegion *keys_region = NULL;
    
    handle.ParseMaps();

    keys_region = handle.GetRegionOfAddress((void*)memaddr);
    keys_region->print(handle,(void*)memaddr);

    /*/// loop

    long unsigned int time = 0;

    while(handle.IsRunning())
    {
        if (time%30==0) 
        { 
           
        }

        if (time%15==0) 
        { 
         
        }

        if (time%5==0) 
        { 
            
        }

        sleep(1);
        time++;
    }

    //*/// end

    printf("OK\n");
    getchar();
    return 0;
}